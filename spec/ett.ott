%% This file uses the Ott tool to specify the grammar, typing and
%% evaluation rules for the implicit and explicit languages

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% METAVARIABLES

metavar tmvar, x, y, f, m, n ::=
  {{ repr-locally-nameless }}
  {{ com variables }}
  {{ lex alphanum }}

metavar covar, c ::=
  {{ repr-locally-nameless }}
  {{ com coercion variables }}
  {{ lex alphanum }}

metavar datacon, K ::= {{ coq atom }}

metavar const, T , F ::= {{ coq atom }}
  {{ lex Alphanum }}

indexvar index, i ::=
  {{ tex \mathit{[[index]]} }} {{ com indices }} {{ coq nat }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% GRAMMAR

grammar

relflag, rho {{ tex \rho }} :: '' ::= {{ com relevance flag }}
   | +             ::   :: Rel
   | -             ::   :: Irrel

constraint, phi {{ tex \phi }} :: '' ::= {{ com props }}
   | a ~ b : A        ::   :: Eq
     {{ tex [[a]] [[~]]_{[[A]]} [[b]] }}
   | ( phi )          :: S :: Paren
     {{ coq ([[phi]]) }}
   | phi { b / x }    :: S :: Subst
     {{ coq (open_constraint_wrt_tm [[x b]] [[phi]]) }}
   | | phi |          :: S :: Erase
     {{ coq (erase_constraint [[phi]]) }}
%% TODO: think about adding this constraint
%% | phi1 ~ phi2       ::   :: CoIso


tm, a, b, v, w, A, B :: 'a_' ::= {{ com types and kinds }}
   | TYPE               ::   :: Star
     {{ tex \star }}
   | x                  ::   :: Var
   | \ rho x : A . b    ::   :: Abs (+ bind x in b +)
     {{ tex \mathrm{\lambda}^[[rho]][[x]]\!:\![[A]].[[b]] }}
     {{ com annotated lambda }}
   | \ rho x . b        ::   :: UAbs (+ bind x in b +)
     {{ tex \mathrm{\lambda}^[[rho]][[x]].[[b]] }}
     {{ com erased lambda }}
   | a rho b            ::   :: App
     {{ tex [[a]]\ [[b]]^{[[rho]]}  }}
   | T                  ::   :: Const
     {{ com constant }}
   | all rho x : A -> B ::   :: Pi (+ bind x in B +)
     {{ tex \mathrm{\Pi}^[[rho]][[x]]\!:\![[A]][[->]][[B]] }}
   | a |> g             ::   :: Conv
     {{ com coercion }}
   | all c : phi . B    ::   :: CPi (+ bind c in B +)
     {{ tex [[all]][[c]]\!:\![[phi]].[[B]] }}
   | /\ c : phi . b     ::   :: CAbs (+ bind c in b +)
     {{ tex [[/\]][[c]]\!:\![[phi]].[[b]] }}
     {{ com annotated coercion abstraction }}
   | /\ c  . b          ::   :: UCAbs (+ bind c in b +)
     {{ tex [[/\]][[c]].[[b]] }}
     {{ com erased coercion abstraction }}
   | a [ g ]            ::   :: CApp
   | []                 ::   :: Bullet
     {{ com erased term }}
   | Sigma rho x : A . B ::    :: Sigma (+ bind x in B +)
     {{ tex \Sigma^[[rho]] [[x]]\!:\![[A]]. [[B]] }}
   | ( rho a , b )       ::    :: UPair
     {{ tex (^{[[rho]]} [[a]], [[b]] ) }}
     {{ com erased pair }}
   | ( rho a , b ) as A  ::    :: Pair
     {{ tex (^{[[rho]]} [[a]], [[b]] )\ \mathsf{as}\ [[A]] }}
     {{ com annotated pair }}
   | fst a               ::    :: Fst
   | snd a               ::    :: Snd

   %% standard substitution, using open
   | a { b / x }      :: S :: Subst
     {{ coq (open_tm_wrt_tm [[x a]] [[b]]) }}

   %% this is a hack for when a substitution {x/x} is necessary for the
   %% locally nameless backend to generate the correct code, but we don't
   %% want this substitution to show in the tex output
   | a {{{ b / x }}}  :: S :: SecretSubst
     {{ coq (open_tm_wrt_tm [[x a]] [[b]]) }}
     {{ tex [[a]] }}

   | a { g / c }      :: S :: SubstC
     {{ coq (open_tm_wrt_co [[c a]] [[g]])  }}
   | a {{{ g / c }}}  :: S :: SecretSubstC
     {{ coq (open_tm_wrt_co [[c a]] [[g]])  }}
     {{ tex [[a]] }}


   | ( a )            :: S :: Paren
     {{ coq ([[a]]) }}
   %% Ott parsing precedence is hard
   | (# a #)          :: S :: SecretParen
     {{ coq [[a]] }} {{ tex [[a]] }}
     {{ com parsing precedence is hard }}

   |  | a |           :: S :: Erase   {{ coq (erase_tm [[a]]) }}

   %% abbreviations for examples
   | Int              :: S :: Int    {{ coq 0 }}
   | Bool             :: S :: Bool   {{ coq 0 }}
   | Nat              :: S :: Nat    {{ coq 0 }}
   | Vec              :: S :: Vec    {{ coq 0 }}
   | 0                :: S :: Zero   {{ coq 0 }}
   | Succ             :: S :: Succ   {{ coq 0 }} {{ tex \mathsf{S} }}
   | True             :: S :: True   {{ coq 0 }}
   | Fix              :: S :: Fix    {{ coq 0 }}
   | a -> b           :: S :: Arrow  {{ coq (a_Pi [[a]] [[b]]) }}
   | phi => A         :: S :: CArrow {{ coq (a_CPi [[phi]] [[A]]) }}
   | a b              :: S :: RelApp
     {{ coq (a_App [[a]] Rel [[b]]) }}
   | \ x . a          :: S :: RelUAbs
     {{ coq (a_UAbs Rel [[a]]) }}
     {{ tex \lambda [[x]].[[a]] }}
   | \ x : A . a      :: S :: RelAbs
     {{ coq (a_Abs Rel [[A]] [[a]]) }}
     {{ tex \lambda [[x]]\!:\![[A]].[[a]] }}
   | all x : A -> B   :: S :: RelPi
     {{ coq (a_Pi  Rel [[A]] [[B]]) }}

co, g {{ tex \gamma }} :: 'g_' ::= {{ com explicit coercions }}
   | o                    ::   :: Triv
     {{ com erased coercion }}
   | c                    ::   :: Var
   | red a b              ::   :: Beta

   | refl a               ::   :: Refl
   | refl2 a b g          ::   :: Refl2
     {{ tex ([[a]]\mathrel{|\!\!=\!\!|}_{[[g]]}[[b]]) }}
   | sym g                ::   :: Sym
   | g1 ; g2              ::   :: Trans

   | all rho x : g1 -> g2 ::   :: PiCong (+ bind x in g2 +)
     {{ tex \mathrm{\Pi}^[[rho]][[x]]\!:\![[g1]].[[g2]] }}

   | \ rho x : g1 . g2    ::   :: AbsCong (+ bind x in g2 +)
     {{ tex \mathrm{\lambda}^[[rho]][[x]]\!:\![[g1]].[[g2]] }}

   | g1 rho g2            ::   :: AppCong
     {{ tex [[g1]]\ [[g2]]^[[rho]] }}

   | piFst g              ::   :: PiFst
   | cpiFst g             ::   :: CPiFst
   | isoSnd g            ::   :: IsoSnd
   | g1 @ g2              ::   :: PiSnd

   | all c : g1 . g3      ::   :: CPiCong (+ bind c in g3 +)
     {{ tex [[all]][[c]]\!:\![[g1]].[[g3]] }}

   | \ c : g1 . g3 @ g4   ::   :: CAbsCong (+ bind c in g3 +)
     {{ tex \mathrm{\lambda}[[c]]\!:\![[g1]].[[g3]][[@]][[g4]] }}

   | g ( g1 , g2 )        ::   :: CAppCong
   | g @ ( g1 , g2 )      ::   :: CPiSnd
     {{ tex [[g]] [[@]] ([[g1]] \sim [[g2]]) }}
   | g1 |> g2             ::   :: Cast
   | g1 ~ A  g2           ::   :: EqCong
     {{ tex [[g1]] [[~]]_{[[A]]} [[g2]] }}
   | conv phi1 phi2 g     ::   :: IsoConv
     {{ tex [[conv]]\ [[phi1]]\sim_[[g]] [[phi2]] }}

   | eta a                ::   :: Eta
   | left g g'            ::   :: Left
   | right g g'           ::   :: Right

   | Sigma rho x : g1 .  g2 ::   :: SigmaCong (+ bind x in g2 +)
     {{ tex \mathrm{\Sigma}[[x]]\!:\!^{[[rho]]}[[g1]].[[g2]] }}
   | ( rho g1 , g2 ) as g3    ::   :: Pair
   | fst g1               ::   :: Fst
   | snd g1               ::   :: Snd
   | sigmaFst g           ::   :: SigmaFst


   | ( g )                :: S :: Paren   {{ coq ([[g]]) }}
   | (# g #)              :: S :: SecretParen
     {{ coq [[g]] }} {{ tex [[g]] }}
   | g { a / x }          :: S :: TSubst
     {{ coq open_co_wrt_tm [[x g]] [[a]] }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

substitutions
  single a x   :: tm_subst_tm
  single g x   :: co_subst_tm
  single a c   :: tm_subst_co
  single g c   :: co_subst_co

freevars
  a x   :: fv_tm_tm
  g x   :: fv_co_tm
  a c   :: fv_tm_co
  g c   :: fv_co_co

parsing
  a_Abs right a_App
  a_UAbs right a_App
  a_Abs <= a_RelApp
  a_UAbs <= a_RelApp
  a_App left a_App
  a_RelApp left a_App
  a_App left a_RelApp
  a_RelApp left a_RelApp
  a_CApp left a_App
  a_App left a_CApp
  a_CApp left a_RelApp
  a_RelApp left a_CApp

  a_Arrow right a_Arrow
  a_App right a_Arrow
  a_RelApp right a_Arrow
  a_Pi right a_Arrow
  a_CPi right a_Arrow

  a_Arrow <= a_Pi

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  This part is not handled by LNgen

grammar

sig_sort :: '' ::= {{ com signature classifier }}
   | : A             ::    :: Cs
   | ~ a : A         ::    :: Ax

sort :: '' ::= {{ com binding classifier }}
   | Tm rho A         ::   :: Tm
   | Co phi           ::   :: Co


grammar

context, G {{ tex \Gamma }} :: 'ctx_' ::= {{ com contexts }}
                                          {{ coq list ( atom * sort ) }}
   | empty           ::    :: Empty   {{ coq nil }}

   | G , x : rho A   ::    :: ConsTm  {{ coq (([[x]]~ Tm [[rho]][[A]]) ++ [[G]]) }}
   | G , c : phi     ::    :: ConsCo  {{ coq (([[c]]~ Co [[phi]]) ++ [[G]]) }}
   | G { b / x }     :: M  :: SubstA  {{ coq (open_context_wrt_tm [[x G]][[b]] }}
   | G { g / c }     :: M  :: SubstG  {{ coq (open_context_wrt_co [[c G]][[g]]  }}
   | G ++ G'         :: M  :: Append  {{ coq ([[G]] ++ [[G']]) }}
     {{ tex [[G]], [[G']] }}
   | | G |           :: M  :: Erase   {{ coq (erase_context [[G]]) }}
   | ( G )           :: M  :: Paren   {{ coq ([[G]]) }}
   | (# G #)         :: M  :: SecretParen {{ coq [[G]] }} {{ tex [[G]] }}

available_props, D {{ tex \Delta }} :: 'D_' ::= {{ coq atoms }} {{ coq-universe Type }}
   | emptyD          ::    :: Empty   {{ coq AtomSetImpl.empty }} {{ tex \varnothing }}
   | D , c           ::    :: ConsCo  {{ coq (singleton [[c]] \u [[D]]) }}
   | dom G           :: M  :: DomG    {{ coq (dom [[G]]) }} {{ tex \widetilde {[[G]]} }}
   | ( D )           :: M  :: Paren   {{ coq ([[D]]) }}

sig, S {{ tex \Sigma }} :: 'sig_' ::= {{ com signatures }} {{ coq list (atom * sig_sort) }}
   | emptyS         ::    :: Empty       {{ coq nil }}
     {{ tex \varnothing }}
   | S , T sig_sort      ::    :: ConsCs      {{ coq (([[T]]~[[sig_sort]])++[[S]]) }}
     {{ tex [[S]] \cup \{[[T]] [[sig_sort]]\} }}
   | toplevel       :: M  :: Toplevel
     {{ coq toplevel }}
     {{ tex \Sigma_0 }}
   | an_toplevel    :: M  :: AnToplevel
     {{ coq an_toplevel }}
     {{ tex \Sigma_1 }}
   | | S |          :: M  :: Erase  {{ coq (erase_sig [[S]]) }}



substitutions
  single G x :: ctx_subst_tm
  single G c :: ctx_subst_co

freevars
  G x :: fv_ctx_tm
  G c :: fv_ctx_co




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Terminals  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

grammar

terminals :: 'terminals_' ::=
  | <->               ::   :: iso           {{ tex \leftrightarrow }}
  | <=>               ::   :: lrarrow       {{ tex \Leftrightarrow }}
  | -->               ::   :: step          {{ tex \longrightarrow }}
  | min               ::   :: min           {{ tex \mathsf{min} }}
  | ==                ::   :: definitional  {{ tex \equiv }}
  | all               ::   :: forall     {{ tex \forall }}
  | in                ::   :: in         {{ tex \in }}
  | notin             ::   :: notin      {{ tex \not\in }}
  | <=                ::   :: check      {{ tex \Leftarrow }}
  | =>                ::   :: infer      {{ tex \Rightarrow }}
  | =>*               ::   :: minfer      {{ tex \Rightarrow^{\ast} }}
  | ->                ::   :: arrow      {{ tex \to }}
  | /\                ::   :: ilam       {{ tex \mathrm{\Lambda} }}   % Swag
  | <-|               ::   :: mapsfrom   {{ tex \mapsfrom }}
  | []                ::   :: box        {{ tex \Box }}
  | |-                ::   :: entails    {{ tex \vdash }}
  | -|                ::   :: produces   {{ tex \dashv }}
  | |=                ::   :: hs_entails {{ tex \vDash }}
  | |==               ::   :: hs_entaill {{ tex \vDash }}
  | /=                ::   :: neq        {{ tex \neq }}
  | |>                ::   :: cast       {{ tex \triangleright }}
  | ok                ::   :: ok         {{ tex \ \mathsf{ok} }}
  | _                 ::   :: blank      {{ tex \_ }}
  | ~>                ::   :: produce    {{ tex \leadsto }}
  | ~>*               ::   :: multistep  {{ tex \leadsto^{\ast} }}
  | ~>h               ::   :: steph      {{ tex \leadsto }}
  | empty             ::   :: empty      {{ tex \varnothing }}
  | hole              ::   :: hole       {{ tex \circ }}
  | fv                ::   :: fv         {{ tex \mathsf{fv}\! }}
  | dom               ::   :: dom        {{ tex \mathsf{dom} }}
  | ~                 ::   :: twiddle    {{ tex \sim }}
  | ~~                ::   :: compatible {{ tex \asymp }}
  | '|'               ::   :: bar        {{ tex | }}
  | o                 ::   :: bullet     {{ tex \bullet }}
  | fst               ::   :: fst
  | snd               ::   :: snd
  | |=>|              ::   :: erasesto   {{ tex \mathrel{|\Rightarrow|} }}
  | |-=               ::   :: turneq     {{ tex \vdash_{=} }}
  | refl2             ::   :: refl2      {{ tex \mathbf{refl_2}  }}
  | ++                ::   :: concat     {{ tex \mathop{++} }}

formula :: 'formula_' ::=
  | judgement                ::   :: judgement
  | x : rho A in G               ::   :: inG
    {{ coq binds [[x]] (Tm [[rho]][[A]]) [[G]] }}

  | c : phi  in G         ::   :: inGP
    {{ coq binds [[c]] (Co [[phi]]) [[G]] }}

  | T : A in S             ::   :: inGF
    {{ coq binds [[T]] (Cs [[A]]) [[S]] }}

  | F ~ a : A in S             ::   :: inGFam
    {{ coq binds [[F]] (Ax [[a]][[A]]) [[S]] }}

  | K : T G in S               ::   :: inSD
    {{ coq binds [[K]] ([[T]],[[G]]) [[S]] }}

  | x in D                   ::   :: availx
    {{ coq AtomSetImpl.In [[x]] [[D]] }}
  | c in D                   ::   :: avail
    {{ coq AtomSetImpl.In [[c]] [[D]] }}
  | c not relevant in g      ::   :: notrelevant
    {{ coq [[c]] \notin (fv_relevant [[g]]) }}
  | x notin fv a             ::   :: fresh
    {{ coq [[x]] \notin fv_tm_tm_tm [[a]] }}
  | x notin dom G            ::   :: notInGx
    {{ coq ~ AtomSetImpl.In [[x]] (dom [[G]]) }}
  | c notin dom G            ::   :: notInGc
    {{ coq ~ AtomSetImpl.In [[c]] (dom [[G]]) }}
  | T notin dom S            ::   :: notInST
    {{ coq ~ AtomSetImpl.In [[T]] (dom [[S]]) }}
  | F notin dom S            ::   :: notInSF
    {{ coq ~ AtomSetImpl.In [[F]] (dom [[S]]) }}
  | a = b                    ::   :: equal
    {{ coq ([[a]] = [[b]]) }}
  |  phi1 =  phi2       ::   :: erasedphi
    {{ coq ([[phi1]] = [[phi2]]) }}
  | G1 = G2                  ::   :: equalctx
    {{ coq ([[G1]] = [[G2]]) }}
  | g1 = g2                  ::   :: equalco
    {{ coq ([[g1]] = [[g2]]) }}
  | not formula              ::   :: not
    {{ coq not ([[formula]]) }}
  | formula1 /\ formula2     ::   :: and
    {{ coq [[formula1]] /\ [[formula2]] }}
  | formula1 \/ formula2     ::   :: or
    {{ coq [[formula1]] \/ [[formula2]] }}
  | formula1 implies formula2     ::   :: implies
    {{ coq [[formula1]] -> [[formula2]] }}
  | ( formula )              ::   :: Paren
    {{ coq ([[formula]]) }}
  | [ formula ]              ::   :: Regular
    {{ coq ([[formula]]) }}
    {{ tex \suppress{[[formula]]} }}
  | c : (a : A ~ b : B) in G ::   :: Alt
    {{ coq True }}
  | nolc A                   ::   :: NoLC
    {{ com suppress lc hypothesis generated by Ott }}
    {{ coq True }}
    {{ tex      }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Coq Definitions necessary to specify the semantics

embed {{ coq
Fixpoint erase_tm (a : tm) : tm :=
   match a with
   | a_Star    => a_Star
   | a_Var_b n => a_Var_b n
   | a_Var_f x => a_Var_f x
   | a_Abs rho A b => a_UAbs rho (erase_tm b)
   | a_UAbs rho b => a_UAbs rho (erase_tm b)
   | a_App a Rel b => a_App (erase_tm a) Rel (erase_tm b)
   | a_App a Irrel b => a_App (erase_tm a) Irrel a_Bullet
   | a_Const T => a_Const T
   | a_Pi rho A B => a_Pi rho (erase_tm A) (erase_tm B)
   | a_Conv a _ => erase_tm a
   | a_CPi phi B => a_CPi (erase_constraint phi) (erase_tm B)
   | a_CAbs phi b => a_UCAbs (erase_tm b)
   | a_UCAbs b => a_UCAbs (erase_tm b)
   | a_CApp a g => a_CApp (erase_tm a) g_Triv
   | a_Bullet => a_Bullet
   | a_Sigma rho A B => a_Sigma rho (erase_tm A) (erase_tm B)
   | a_UPair rho a b => a_UPair rho (erase_tm a) (erase_tm b)
   | a_Pair Rel a b A => a_UPair Rel (erase_tm a) (erase_tm b)
   | a_Pair Irrel a b A => a_UPair Irrel a_Bullet (erase_tm b)
   | a_Fst a => a_Fst (erase_tm a)
   | a_Snd a => a_Snd (erase_tm a)
   end
with erase_constraint (phi : constraint) : constraint :=
   match phi with
   | Eq A B A1 => Eq (erase_tm A) (erase_tm B) (erase_tm A1)
   end.

Definition erase_sort s :=
 match s with
 | Tm rho a => Tm rho (erase_tm a)
 | Co p => Co (erase_constraint p)
end.


Definition erase_csort s :=
 match s with
 | Cs a   => Cs (erase_tm a)
 | Ax a A => Ax (erase_tm a) (erase_tm A)
end.

Definition erase_context G := map erase_sort G.
Definition erase_sig S := map erase_csort S.

(* -------------- A specific signature with Fix ------------ *)
Definition Fix : atom.
  pick fresh F.
  exact F.
Qed.

Definition FixDef : tm :=
  (a_Abs Irrel a_Star
         (a_Abs Rel (a_Pi Rel (a_Var_b 0) (a_Var_b 1))
                (a_App (a_Var_b 0) Rel
                       (a_App (a_App (a_Const Fix) Irrel (a_Var_b 1)) Rel (a_Var_b 0))))).

Definition FixTy : tm :=
  a_Pi Irrel a_Star
       (a_Pi Rel (a_Pi Rel (a_Var_b 0) (a_Var_b 1))
             (a_Var_b 1)).


Definition an_toplevel : sig := Fix ~ Ax FixDef FixTy.

Definition toplevel : sig := erase_sig an_toplevel.

}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% "Syntactic" definitions

defns 
Jsub :: '' ::=

%% Note - is 0
%%      + is omega
defn
rho1 <= rho2 ::  :: SubRho :: '' 
by

--------- :: Bot
- <= rho 

----------- :: Top
rho <= + 

----------  :: Refl
rho <= rho

defn 
G1 <= G2 ::   :: SubG :: 'Sub_'
by

----------------- :: Empty
empty <= empty

rho1 <= rho2
G1 <= G2
-------------------------- :: ConsTm
G1 ,x:rho1 A <= G2 , x :rho2 A

G1 <= G2
-------------------------- :: ConsCo
G1 , c:phi <= G2 , c :phi


defns
JValue :: '' ::=

defn
CoercedValue A ::   :: CoercedValue :: ''
{{ com Values with at most one coercion at the top }}
by

Value a
----------------- :: CV
CoercedValue a

Value a
---------------------- :: CC
CoercedValue (a |> g)

defn
Value A  ::   :: Value    :: 'Value_'
{{ com values }}
{{ tex \suppress{\mathsf{Value}\ [[A]]} }}
by

------- :: Star
Value TYPE

-------------------------- :: Pi
Value all rho x : A -> B

-------------------- :: CPi
Value all c : phi. B

--------------------- :: AbsRel
Value \ + x:A. a

--------------------- :: UAbsRel
Value \ + x. a

Value a
--------------------- :: UAbsIrrel
Value \ - x. a

CoercedValue a
-------------------- :: AbsIrrel
Value \ - x:A. a

--------------------- :: CAbs
Value /\c:phi.a

--------------------- :: UCAbs
Value /\c .a

--------------------------- :: Sigma
Value Sigma rho x : A . B

-------------------------- :: UPair
Value ( rho a , b ) 

-------------------------- :: Pair
Value ( rho a , b ) as A


defn
ValueType A ::   :: value_type :: 'value_type_'
{{ com Types with head forms (erased language) }}
by

------- :: Star
ValueType TYPE

-------------------------- :: Pi
ValueType all rho x : A -> B

-------------------- :: CPi
ValueType all c : phi. B

-------------------------- :: Sigma
ValueType Sigma rho x : A . B


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Definitions for consistency proof

defns
   Jconsistent :: '' ::=

defn
   consistent a b ::  :: consistent :: 'consistent_a_'
   {{ com (erased) types do not differ in their heads }}
by

---------------------- :: Star
consistent TYPE TYPE

------------------------ :: Pi
consistent (all rho x1:A1 -> B1) (all rho x2:A2 -> B2)

------------------------ :: CPi
consistent (all c1:phi1. A1) (all c2 :phi2. A2)


------------------------ :: Sigma
consistent (Sigma rho x:A1. B1) (Sigma rho x : A2. B2)


			  not ValueType b
---------------------- :: Step_R
consistent a b

not ValueType a
---------------------- :: Step_L
consistent a b

defns
JChk :: '' ::=

defn
rho => check x in A ::    :: RhoCheck :: 'Rho_'
{{ tex ([[rho]] = +) \vee ([[x]]\not\in\mathsf{fv}\; [[A]]) }}
{{ com irrelevant argument check }}
by

nolc A
-------------------- :: Rel
+ => check x in A

x notin fv A
-------------------- :: IrrRel
- => check x in A

defns
  Jerased :: '' ::=

defn
  erased_tm a ::  :: erased_tm :: 'erased_a_'
by

--------- :: Bullet
erased_tm []

------------  :: Star
erased_tm TYPE

-------- :: Var
erased_tm x

erased_tm a
rho => check x in a
-------------------- :: Abs
erased_tm (\rho x.a)


erased_tm a
erased_tm b
----------------- :: App
erased_tm (a + b)

erased_tm a
----------------- :: AppIrrel
erased_tm (a - [])

erased_tm A
erased_tm B
------------------------- :: Pi
erased_tm (all rho x:A -> B)

erased_tm a
erased_tm b
erased_tm A
erased_tm B
---------------------------------- :: CPi
erased_tm (all c:a ~ b : A. B)

erased_tm b
--------------- :: CAbs
erased_tm (/\c. b)

erased_tm a
--------------- :: CApp
erased_tm (a [o])

-------- :: Fam
erased_tm F

erased_tm A
erased_tm B
------------------------- :: Sigma
erased_tm (Sigma rho x:A. B)

erased_tm a
erased_tm b
------------------ :: UPairRel
erased_tm (+ a , b)

erased_tm b
------------------ :: UPairIrrel
erased_tm (- [] , b)

erased_tm a
------------------ :: Fst
erased_tm (fst a)

erased_tm a
------------------ :: Snd
erased_tm (snd a)



defns
  Jpar :: '' ::=


defn
G ; D |- a => b ::  :: Par :: 'Par_'
{{ tex \vDash [[a]] [[=>]] [[b]] }}
{{ com parallel reduction (implicit language) }}
by

----------------------- :: Refl
G ; D |- a => a


G ; D |- a => (\+ x.a')
G ; D |- b => b'
---------------------------- :: Beta
G ; D |- a + b => a' { b' / x }

G ; D |- a => (\- x.a')
---------------------------- :: BetaIrrel
G ; D |- a - [] => a' { [] / x }

G ; D |- a => a'
G ; D |- b => b'
-------------------------- :: App
G ; D |- a + b => a' + b'

G ; D |- a => a'
-------------------------- :: AppIrrel
G ; D |- a - [] => a' - []

G ; D |- a => (/\c .a')
----------------------- :: CBeta
G ; D |- a [o] => a' { o / c }

G ; D |- a => a'
----------------------- :: CApp
G ; D |- a [o] => a' [o]

G ; D |- a => a'
-------------------------------- :: Abs
G ; D |- \ rho x. a => \ rho x. a'

G ; D |- A => A'
G ; D |- B => B'
-------------------------------------------- :: Pi
G ; D |- all rho x:A -> B => all rho x:A' -> B'

G ; D |- a => a'
--------------------------- :: CAbs
G ; D |- /\c . a => /\c . a'

G ; D |- A => A'
G ; D |- B => B'
G ; D |- a => a'
G ; D |- A1 => A1'
----------------------------------------- :: CPi
G ; D |- all c:A~B:A1. a => all c:A'~B':A1'. a'

% NOTE: toplevel is assumed to be locally closed
F ~ a : A in toplevel
-------------------------------- :: Axiom
G ; D |- F => a

G ; D |- b => b'
a = b + x
----------------------------- :: Eta
G ; D |- \+ x. a => b'


G ; D |- b => b'
a = b - []
----------------------------- :: EtaIrrel
G ; D |- \- x. a => b'

G ; D |- b => b'
a = b [o]
----------------------------- :: EtaC
G ; D |- /\c. a => b'

G ; D |- A => A'
G ; D |- B => B'
-------------------------------------------- :: Sigma
G ; D |- Sigma rho x:A . B => Sigma rho x:A' . B'

G ; D |- a => a'
G ; D |- b => b'
-------------------------- :: Pair
G ; D |- (+ a , b) => (+ a' , b')

G ; D |- b => b'
------------------------------------ :: PairIrrel
G ; D |- (- [] , b) => (- [] , b')


G ; D |- a => (rho a1 , a2)
---------------------------- :: Fst
G ; D |- fst a  => a1

G ; D |- a => (rho a1 , a2)
---------------------------- :: Snd
G ; D |- snd a  => a2

G ; D |- a => a1
---------------------------- :: FstCong
G ; D |- fst a  => fst a1

G ; D |- a => a2
---------------------------- :: SndCong
G ; D |- snd a  => snd a2


defn
G ; D |- a =>* b ::   :: MultiPar :: 'MP_'
{{ tex [[|-]] [[a]] [[=>*]] [[b]] }}
{{ com multistep parallel reduction }}
by

------------------ :: Refl
G ; D |- a =>* a

G ; D |- a => b
G ; D |- b =>* a'
--------------------- :: Step
G ; D |- a =>* a'

defn
G ; D |- a <=> b ::   :: joins :: ''
{{ tex [[|-]] [[a]] [[<=>]] [[b]] }}
{{ com parallel reduction to a common term }}
by

G ; D |- a1 =>* b
G ; D |- a2 =>* b
------------------------ :: join
G ; D |- a1 <=> a2


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Implicit (or erased) language reductions

defns
 Jbeta :: '' ::=

defn
|= a > b  ::     :: Beta :: 'Beta_'
{{ com primitive reductions on erased terms }}
by

------------------------------------ :: AppAbs
|= (\+ x.v) + b > v { b / x }

Value (\- x. v)
------------------------------------ :: AppAbsIrrel
|= (\- x.v) - [] > v { [] / x }


------------------------------- :: CAppCAbs
|= (/\c .a') [o] > a' { o / c }


F ~ a : A in toplevel
-------------------------------- :: Axiom
|= F > a

------------------------- :: Fst
|= fst ( rho a , b ) > a

------------------------- :: Snd
|= snd ( rho a , b ) > b


defn
 |= a ~> b ::   :: reduction_in_one :: 'E_'
{{ com single-step head reduction for implicit language }}
by

|= a ~> a'
-------------------------  :: AbsTerm
|= \- x.a ~> \- x.a'

|= a ~> a'
-------------------------  :: AppLeft
|= a + b ~> a' + b

|= a ~> a'
-------------------------  :: AppLeftIrrel
|= a - [] ~> a' - []

|= a  ~> a'
-----------------------------   :: CAppLeft
|= a [o]  ~> a' [o]


----------------------------------  :: AppAbs
|= (\+ x.v) + a ~> v { a / x}

Value (\- x. v)
----------------------------------  :: AppAbsIrrel
|= (\- x.v) - [] ~> v { [] / x}

--------------------------------  :: CAppCAbs
|= (/\c .b) [o] ~> b { o / c}

F ~ a : A in toplevel
-------------------- :: Axiom
|= F ~> a

------------------------- :: FstRed
|= fst ( rho a , b ) ~> a

------------------------- :: SndRed
|= snd ( rho a , b )~> b

|= a ~> a'
--------------------  :: FstCongRed
|= fst a ~> fst a'

|= a ~> a'
--------------------  :: SndCongRed
|= snd a ~> snd a'


defn

|= a ~>* b ::  :: reduction :: ''
{{ com multistep reduction }}
by

------------------- :: Equal
|= a ~>* a

|= a ~> b
|= b ~>* a'
------------------- :: Step
|= a ~>* a'

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Implicit (or erased) language type system

defns
Jett :: '' ::=


defn
G |= rho phi ok ::    :: PropWff :: 'E_'
{{ com Prop wellformedness }}
{{ tex [[G]] [[|=]]^{[[rho]]} [[phi]]\ \mathsf{ok} }}
by

G |= rho a : A
G |= rho b : A
[ G |= - A : TYPE ]
---------------------------  :: Wff
G |= rho a ~ b : A  ok

defn

G |= rho a : A ::   :: Typing :: 'E_'
{{ com typing }}
{{ tex [[G]] [[|=]]^{[[rho]]} [[a]] : [[A]] }}
by

|= G
---------------------  :: Star
G |= rho TYPE : TYPE

|= G
x:rho1 A in G
rho2 <= rho1
------------------ :: Var
G |= rho2 x : A

%% 2nd premise IS NOT redundant
G, x:- A |= rho1  B : TYPE
G |= rho1 A : TYPE 
------------------------------------ :: Pi
G |= rho1 all rho x:A -> B : TYPE

%% 2nd premise IS redundant
G, x:rho A |= rho1 a : B
[G |= - A : TYPE ]
G |= - all rho x: A -> B : TYPE 
rho => check x in a
---------------------------------- :: Abs
G |= rho1 \ rho x . a : all rho x:A -> B

G |= rho b : all+ x : A -> B
G |= rho a : A
------------------------------------- :: App
G |= rho b + a : B { a / x }

G |= rho b : all - x : A -> B
G |= - a : A
------------------------------------- :: IApp
G |= rho b - [] : B { a / x }


G |= rho a : A
G ; dom G |= - A == B : TYPE
[ G |= - B : TYPE ]
----------------------------- :: Conv
G |= rho a : B

G, c : phi |= rho B : TYPE
G |= rho phi ok 
-------------------------------- :: CPi
G |= rho all c:phi. B : TYPE

G, c:phi |= rho a : B
[ G |= - phi ok ]
------------------------------------------------- :: CAbs
G |= rho /\ c . a : all c:phi. B

G |= rho a1 : all c : (a ~ b : A) . B1
G ; dom G |= - a == b : A
------------------------------------------- :: CApp
G |= rho a1 [ o ] : B1 { o / c }

|= G
F ~ a : A in toplevel
[ empty |= - A : TYPE ]
------------------ :: Fam
G |= rho F : A

G, x:- A |= rho1 B : TYPE
G |= rho1 A : TYPE 
------------------------------------ :: Sigma
G |= rho1 Sigma rho x:A . B : TYPE

G |= + a : A
G |= rho b : B { a / x }
G |= - Sigma + x : A . B : TYPE
------------------------------------- :: Pair
G |= rho (+ a, b) : Sigma + x : A . B

G |= - a : A
G |= rho b : B { a / x }
G |= - Sigma - x : A . B : TYPE
------------------------------------- :: PairIrrel
G |= rho (- [], b) : Sigma - x : A . B


G |= rho a : Sigma + x : A . B
------------------------------------- :: Fst
G |= rho fst a : A

G |= - a : Sigma - x : A . B
------------------------------------- :: FstIrrel
G |= - fst a : A


G |= rho1 a : Sigma rho x : A . B
------------------------------------- :: Snd
G |= rho1 snd a : B { fst a / x }

%% Ok to use relevant assumptions (omega, rho1) 
%% in irrelevant contexts (0, rho2)
%% x:- A |- - x:A
%% x:+ A |- - x:A  
%%     Need to move from + (omega) to - (0),
%%     so we are contravariant 
%% x:+ A |- + x:A
%% x:- A |- + x:A BAD NO NO

defn
G ; D |= rho phi1 == phi2  ::    :: Iso :: 'E_'
{{ com prop equality }}
by

G ; D |= rho A1 == A2 : A
G ; D |= rho B1 == B2 : A
---------------------------------------- :: PropCong
G ; D |= rho A1 ~ B1 : A == A2 ~ B2 : A

G ; D |= - A == B : TYPE
G |= rho A1 ~ A2 : A ok
G |= rho A1 ~ A2 : B ok
----------------------------------------- :: IsoConv
G ; D |= rho A1 ~ A2 : A == A1 ~ A2 : B

G ; D |= rho all c:phi1. B1 == all c:phi2. B2 : TYPE
------------------------------------------------- :: CPiFst
G ; D |= rho phi1 == phi2


defn

G ; D |= rho a == b : A ::     :: DefEq :: 'E_'
{{ com definitional equality }}
by

|= G
c: (a ~ b : A) in G
c in D
-------------------- :: Assn
G ; D |= rho a == b : A

G |= rho a : A
-------------------- :: Refl
G ; D |= rho a == a : A

G ; D |= rho b == a : A
-------------------- :: Sym
G ; D |= rho a == b : A

G ; D |= rho a == a1 : A
G ; D |= rho a1 == b : A
------------------------------------- :: Trans
G ; D |= rho a == b : A

%% second premise is NOT redundant when 
%% rho is -. 
%% This is important to rule out some beta-reductions
G |= rho a1 : B
G |= rho a2 : B
|= a1 > a2
--------------------------------  :: Beta
G ; D |= rho a1 == a2 : B

%% Rules related to functions

G ; D |= rho1 A1 == A2 : TYPE
G, x:- A1; D |= rho1 B1 == B2 : TYPE
%% this needed by weakening IH
G |= rho1 A1 : TYPE
%% these two needed by regularity
[G |= rho1 all rho x:A1 -> B1 : TYPE]
[G |= rho1 all rho x:A2 -> B2 : TYPE]
---------------------------------------------------------- :: PiCong
G ; D |= rho1 (all rho x:A1 -> B1) == (all rho x:A2 -> B2) : TYPE


G, x:rho A1 ; D |= rho1 b1 == b2 : B
[ G |= - A1 : TYPE ]
rho => check x in b1
rho => check x in b2
-------------------------------------------------------------- :: AbsCong
G ; D |= rho1 (\ rho x. b1) == (\ rho x. b2) : all rho x:A1 -> B

G ; D |= rho a1 == b1 : all + x:A -> B
G ; D |= + a2 == b2 : A
-------------------------------------- :: AppCong
G ; D |= rho a1 + a2 == b1 + b2 : B { a2 / x }


G ; D |= rho a1 == b1 : all - x:A -> B
G |= - a : A
------------------------------------------ :: IAppCong
G ; D |= rho a1 - [] == b1 - [] : B { a / x }


G ; D |= rho1 all rho x:A1 -> B1 == all rho x:A2 -> B2 : TYPE
------------------------------------------------- :: PiFst
G ; D |= rho1 A1 == A2 : TYPE

G ; D |= rho1 all rho x:A1 -> B1 == all rho x:A2 -> B2 : TYPE
G ; D |= rho a1 == a2 : A1
------------------------------------------- :: PiSnd
G ; D |= rho1 B1 {a1 /x}  == B2 {a2/x} : TYPE

%% Rules related to Coercion Abstraction

G ; D |= rho phi1 == phi2
G, c: phi1 ; D |= rho A == B : TYPE
[G |= rho phi1 ok]
[G |= rho all c:phi1. A : TYPE]
[G |= rho all c:phi2. B : TYPE]
--------------------------------------------------------- :: CPiCong
G ; D |= rho all c:phi1. A  == all c:phi2. B : TYPE

G, c: phi1 ; D |= rho a == b : B
[ G |= - phi1 ok ]
------------------------------------------------------------ :: CAbsCong
G ; D |= rho (/\c . a) == (/\ c . b) : all c:phi1. B

G ; D |= rho a1 == b1 : all c:(a ~ b : A). B
G ; dom G |= - a == b : A
-------------------------------------- :: CAppCong
G ; D |= rho a1 [o] == b1 [o] : B { o / c }

G ; D |= rho all c:(a1 ~ a2 : A). B1 == all c:(a1'~ a2' : A'). B2 : TYPE
G ; dom G |= - a1 == a2 : A
G ; dom G |= - a1' == a2' : A'
---------------------------------------------- :: CPiSnd
G ; D |= rho B1 { o / c} == B2 { o / c } : TYPE

%% Other rules

G ; D |= rho a == b : A
G ; D |= rho a ~ b : A == a' ~ b' : A'
-------------------------------------- :: Cast
G ; D |= rho a' == b' : A'

G ; D |= rho a == b : A
G ; dom G |= - A == B : TYPE
-------------------------------------- :: EqConv
G ; D |= rho a == b : B

G ; D |= - a ~ b : A == a' ~ b' : A'
-------------------------------------- :: IsoSnd
G ; D |= - A == A' : TYPE

G |= rho b : all + x:A -> B
a = b + x
------------------------------------------ :: EtaRel
G ; D |= rho \+ x. a == b : all + x:A -> B

G |= rho b : all - x:A -> B
a = b - []
------------------------------------------ :: EtaIrrel
G ; D |= rho \- x. a == b : all - x:A -> B

G |= rho b : all c:phi. B
a = b [o]
------------------------------------------ :: EtaC
G ; D |= rho /\c. a == b : all c:phi. B

G ; D |= rho1 A1 == A2 : TYPE
G, x:- A1; D |= rho1 B1 == B2 : TYPE
%% this needed by weakening IH
[G |= rho1 A1 : TYPE]
%% these two needed by regularity
[G |= rho1 Sigma rho x:A1 . B1 : TYPE]
[G |= rho1 Sigma rho x:A2 . B2 : TYPE]
---------------------------------------------------------- :: SigmaCong
G ; D |= rho1 (Sigma rho x:A1 . B1) == (Sigma rho x:A2 . B2) : TYPE

G ; D |= + a1 == b1 : A
G ; D |= rho a2 == b2 : B { a1 / x }
G |= - Sigma + x : A . B : TYPE
-------------------------------------- :: PairCong
G ; D |= rho (+ a1, a2) == (+ b1 , b2) : Sigma + x:A . B

G |= - a : A
G ; D |= rho a2 == b2 : B { a / x }
G |= - Sigma - x : A . B : TYPE
-------------------------------------- :: PairCongIrrel
G ; D |= rho (- [], a2) == (- [] , b2) : Sigma - x:A . B

G ; D |= rho a1 == b1 : Sigma + x:A . B
-------------------------------------- :: FstCong
G ; D |= rho fst a1  == fst b1 : A

G ; D |= - a1 == b1 : Sigma - x:A . B
-------------------------------------- :: FstCongIrrel
G ; D |= - fst a1  == fst b1 : A


G ; D |= rho a1 == b1 : Sigma rho1 x:A . B
----------------------------------------------- :: SndCong
G ; D |= rho snd a1  == snd b1 : B { fst a1 / x }




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% We can also add many more rules about "injectivity"
%% to this language including:

% G ; D |=  (/\c . a) == (/\ c . b) : all c:phi1. B
% ------------------------------------------------------------ :: CAbsFst
% G, c: phi1 ; D |= a == b : B

% G ; D |=  (\ rho x. b1) == (\ rho x. b2) : all rho x:A1 -> B
% -------------------------------------------------------------- :: AbsFst
% G, x:A1 ; D |= b1 == b2 : B

% G |= a1 : all - x:A -> B
% G |= b1 : all - x:A -> B
% G ; D |= a1 - [] == b1 - [] : B { a / x }
% ------------------------------------------ :: IAppFst
% G ; D |= a1 == b1 : all - x:A -> B


% G |= a1 : all c:a ~ b : A. B
% G |= b1 : all c:a ~ b : A. B
% G ; D |= a1 [o] == b1 [o] : B { o / c }
% -------------------------------------- :: CAppFst
% G ; D |= a1 == b1 : all c:a ~ b : A. B


defn
|= G ::    :: Ctx  :: 'E_'
{{ com context wellformedness }}
by

---------- :: Empty
|= empty

|= G
G |= - A : TYPE
x notin dom G
--------------------- :: ConsTm
|= G, x : rho A

|= G
G |= - phi ok
c notin dom G
-------------------- :: ConsCo
|= G, c: phi

defns

Jsig :: '' ::=

defn
|= S ::    :: Sig :: 'Sig_'
{{ com signature wellformedness }}
by

------------ :: Empty
|= emptyS

|= S
empty |= - A : TYPE
empty |= + a : A
F notin dom S
---------------- :: ConsAx
|= S, F ~ a : A

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Annotated language semantics
%

defns
Jann :: '' ::=

defn
G |- phi ok ::   :: AnnPropWff :: 'An_'
{{ com prop wellformedness }}
by

G |- a : A
G |- b : B
|A| = |B|
------------------------- :: Wff
G |- a ~ b : A  ok

defn
G |- a : A ::  :: AnnTyping :: 'An_'
{{ com typing }}
by

|- G
------------  :: Star
G |- TYPE : TYPE

|- G
x : rho A in G
----------- :: Var
G |- x : A

G, x: rho A |- B : TYPE
[ G |- A : TYPE ]
------------------------------------ :: Pi
G |- all rho x:A -> B : TYPE

[ G |- A : TYPE ]
G, x: rho A |- a : B
rho => check x in | a |
---------------------------------- :: Abs
G |- \ rho x : A. a : all rho x:A -> B

G |- b : all rho x:A -> B
G |- a : A
------------------------------------- :: App
G |- b rho a : B { a / x }

G |- a : A
G ; dom G |- g : A ~ B
G |- B : TYPE
----------------------------- :: Conv
G |- a |> g : B

[ G |- phi ok ]
G, c : phi |- B : TYPE
-------------------------------- :: CPi
G |- all c:phi. B : TYPE

[ G |- phi ok ]
G, c:phi |- a : B
------------------------------------------------- :: CAbs
G |- /\ c: phi. a : all c:phi. B

G |- a1 : all c : a ~ b : A1. B
G ; dom G |- g : a ~ b
------------------------------------- :: CApp
G |- a1 [ g ] : B { g / c }

|- G
F ~ a : A in an_toplevel
[ empty |- A : TYPE ]
----------------------- :: Fam
G |- F : A


G, x:rho A |- B : TYPE
[ G |- A : TYPE ]
------------------------------------ :: Sigma
G |- Sigma rho x:A . B : TYPE

G |- a : A
G |- b : B { a / x }
------------------------------------- :: Pair
G |- (rho a,b) as Sigma rho x : A . B : Sigma rho x : A . B

G |- a : Sigma rho x : A. B
------------------------------------- :: Fst
G |- fst a : A

G |- a : Sigma rho x : A . B
------------------------------------- :: Snd
G |- snd a : B { fst a / x }


defn
G ; D |- g : phi1 == phi2 ::  :: AnnIso :: 'An_'
{{ tex [[G]];[[D]][[|-]] [[g]] : [[phi1]] \sim [[phi2]] }}
{{ com coercion between props }}
by

G ; D |- g1 : A1 ~ A2
G ; D |- g2 : B1 ~ B2
G |- A1 ~ B1 : A ok
G |- A2 ~ B2 : A ok
---------------------------------------------------------- :: PropCong
G ; D |- (g1 ~A g2) : (A1 ~ B1 : A) == (A2 ~ B2 : A)

G ; D |- g : all c:phi1. A2 ~ all c:phi2. B2
--------------------------------------- :: CPiFst
G ; D |- cpiFst g : phi1 == phi2

G ; D |- g : phi1 == phi2
---------------------------- :: IsoSym
G ; D |- sym g : phi2 == phi1

G; D |- g : A ~ B
G |- a1 ~ a2 : A ok
G |- a1' ~ a2' : B ok
|a1| = |a1'|
|a2| = |a2'|
-------------------------------------- :: IsoConv
G ; D |- conv (a1 ~ a2 : A) (a1' ~ a2' : B) g : (a1 ~ a2 : A) == (a1' ~ a2' : B)


defn
G ; D |- g : A ~ B ::  :: AnnDefEq :: 'An_'
{{ com coercion between types }}
by

|- G
c: a ~ b : A in G
c in D
------------------- :: Assn
G ; D |- c : a ~ b

G |- a : A
----------------------------- :: Refl
G ; D |- refl a : a ~ a

G |- a : A
G |- b : B
|a| = |b|
G ; dom G |- g : A ~ B
----------------------------- :: EraseEq
G ; D |- refl2 a b g : a ~ b


G |- b : B
G |- a : A
[ G ; dom G |- g1 : B ~ A ]
G ; D |- g : b ~ a
-------------------------- :: Sym
G ; D |- sym g : a ~ b

G ; D |- g1 : a ~ a1
G ; D |- g2 : a1 ~ b
[ G |- a : A ]
[ G |- a1 : A1 ]
[ G ; dom G |- g3 : A ~ A1 ]
------------------------------------- :: Trans
G ; D |- (g1 ; g2) : a ~ b

G |- a1 : B0
G |- a2 : B1
|B0| = |B1|
|= |a1| > |a2|
--------------------------------  :: Beta
G ; D |- red a1 a2 : a1 ~ a2


%% Note: need to include {x/x} to emphasize that x is free in B2 for
%% the locally nameless backend.
G ; D |- g1 : A1 ~ A2
G, x : rho A1 ; D |- g2 : B1 ~ (# B2 {{{ x / x }}} #)
B3 = B2 { x |> sym g1 / x }
G |- all rho x:A1 -> B1 : TYPE
G |- all rho x:A2 -> B3 : TYPE
G |- (all rho x:A1 -> B2) : TYPE
---------------------------------------------------------- :: PiCong
G ; D |- all rho x:g1 -> g2 : (all rho x:A1 -> B1) ~ (all rho x:A2 -> B3)

G ; D |- g1 : A1 ~ A2
G, x : rho A1 ; D |- g2 : b1 ~ (# b2 {{{x / x}}} #)
b3 = b2 { x |> sym g1 / x }
[ G |- A1 : TYPE ]
G |- A2 : TYPE
rho => check x in | b1 |
rho => check x in | b3 |
[G |- (\ rho x:A1. b2) : B]
------------------------------------------------------------------ :: AbsCong
G ; D |- (\rho x:g1. g2) : (\ rho x:A1. b1) ~ (\ rho x :A2. b3)

% really want heterogenous equality here.
%% NOTE: we know that G |- g3 : A ~ B  must hold (b/c reg), but adding it as
%% an extra assumption for the erasure proof.
G ; D |- g1 : a1 ~ b1
G ; D |- g2 : a2 ~ b2
G |- a1 rho a2 : A
G |- b1 rho b2 : B
[ G ; dom G |- g3 : A ~ B ]
-------------------------------------- :: AppCong
G ; D |- g1 rho g2 : a1 rho a2 ~ b1 rho b2


G ; D |- g : all rho x:A1 -> B1 ~ all rho x:A2 -> B2
--------------------------------------- :: PiFst
G ; D |- piFst g : A1 ~ A2

G ; D |- g1 : all rho x:A1 -> B1  ~ all rho x:A2 -> B2
G ; D |- g2 : a1 ~ a2
G |- a1 : A1
G |- a2 : A2
--------------------------------------- :: PiSnd
G ; D |- g1 @ g2 : (# B1 {a1 /x} #) ~ (# B2 {a2/x} #)


G ; D |- g1 : phi1 == phi2
G, c:phi1 ; D |- g3 : B1 ~ (# B2 {{{c/c}}} #)
B3 = B2 { c |> sym g1 / c }
G |- all c:phi1 . B1 : TYPE
[G |- all c:phi2 . B3 : TYPE]
G |- all c:phi1 . B2 : TYPE
----------------------------------------------------- :: CPiCong
G ; D |- (all c: g1. g3) : (all c:phi1. B1) ~ (all c:phi2. B3)


G ; D |- g1 : phi1 == phi2
G, c:phi1 ; D |- g3 : a1 ~ (# a2{{{c/c}}} #)
a3 = a2 { c |> sym g1 / c }
%% To know that the two types are equal, we need to know
%% that the range types can be shown identical without using
%% the assumption c:phi1. This is a stronger property than
%% regularity implies.
G |- (/\ c:phi1. a1) : all c:phi1. B1
G |- (/\ c:phi2. a3) : all c:phi2. B2
G |- (/\ c:phi1. a2) : B
G ; dom G |- g4 : all c:phi1. B1 ~ all c:phi2. B2
---------------------------------------------------------------- :: CAbsCong
G ; D |- (\ c: g1. g3 @ g4) : (/\ c:phi1. a1) ~ (/\ c:phi2. a3)


G ; D |- g1 : a1 ~ b1
G ; dom G |- g2 : a2 ~ b2
G ; dom G |- g3 : a3 ~ b3
G |- a1 [g2] : A
G |- b1 [g3] : B
[ G ; dom G |- g4 : A ~ B ]
-------------------------------------- :: CAppCong
G ; D |- g1 (g2, g3) : a1 [ g2 ]  ~ b1 [ g3 ]


G ; D |- g1 : (all c1:a~a':A. B1) ~ (all c2:b~b':B. B2)
G ; dom G |- g2 : a~a'
G ; dom G |- g3 : b~b'
-------------------------------------------------- :: CPiSnd
G ; D |- g1 @ (g2, g3) : B1 { g2 / c1 } ~ B2 { g3 / c2 }


G ; D |- g1 : a~a'
G ; D |- g2 : a~a' :A == b~b' : B
--------------------------------------- :: Cast
G ; D |- g1 |> g2 : b~b'


G ; D |- g : (a~a' : A) == (b~b' : B)
---------------------------------- :: IsoSnd
G ; D |- isoSnd g : A ~ B


G |- b : all rho x:A -> B
a = b rho x
--------------------------------------------------- :: Eta
G ; D |- eta b : (\rho x:A. a) ~ b


G |- b : all c:phi. B
a = b [c]
--------------------------------------------------- :: EtaC
G ; D |- eta b : (/\ c:phi. a) ~ b

G ; D |- g1 : A1 ~ A2
G, x : rho A1 ; D |- g2 : B1 ~ (# B2 {{{ x / x }}} #)
B3 = B2 { x |> sym g1 / x }
G |- Sigma rho x:A1 . B1 : TYPE
G |- Sigma rho x:A2 . B3 : TYPE
G |- (Sigma rho x:A1 . B2) : TYPE
---------------------------------------------------------- :: SigmaCong
G ; D |- Sigma rho x:g1 . g2 : (Sigma rho x:A1 . B1) ~ (Sigma rho x:A2 . B3)

G ; D |- g1 : a1 ~ b1 
G ; D |- g2: a2 ~ b2 
G ; D |- g3: A1 ~ A2
-------------------------------------- :: PairCong
G ; D |- (rho g1 , g2) as g3 : (rho a1, a2) as A1 ~ (rho b1 , b2) as A2 

G ; D |- g : a1 ~ b1 
-------------------------------------- :: FstCong
G ; D |- fst g : fst a1  ~ fst b1

G ; D |- g : a1 ~ b1 
----------------------------------------------- :: SndCong
G ; D |- snd g : snd a1  ~ snd b1 

G ; D |- g : Sigma rho x:A1. B1 ~ Sigma rho x:A2. B2
--------------------------------------- :: SigmaFst
G ; D |- sigmaFst g : A1 ~ A2

G ; D |- g1 : Sigma rho x:A1 . B1  ~ Sigma rho x:A2 . B2
G ; D |- g2 : a1 ~ a2
G |- a1 : A1
G |- a2 : A2
--------------------------------------- :: SigmaSnd
G ; D |- g1 @ g2 : (# B1 {a1 /x} #) ~ (# B2 {a2/x} #)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


defn
|- G ::      :: AnnCtx :: 'An_'
{{ com context wellformedness }}
by


---------- :: Empty
|- empty

|- G
G |- A : TYPE
x notin dom G
--------------------- :: ConsTm
|- G, x : rho A

|- G
G |- phi ok
c notin dom G
-------------------- :: ConsCo
|- G, c:phi

defn
|- S ::    :: AnnSig :: 'An_Sig_'
{{ com signature wellformedness }}
by

------------ :: Empty
|- emptyS

|- S
empty |- A : TYPE
empty |- a : A
F notin dom S
---------------- :: ConsAx
|- S, F ~ a  : A


defns
  Jred :: '' ::=

defn
G |- a ~>h b ::   :: head_reduction :: 'An_'
{{ com single-step, weak head reduction to values for annotated language }}
% NOTE: this reduction needs a context for the the
% two push rules. We need to read the coercion proofs
% to know what type annotations to use after the push.
by

G |- a ~>h a'
-------------------------  :: AppLeft
G |- a rho b ~>h a' rho b

Value (\rho x:A.w)
-----------------------------------------  :: AppAbs
G |- (\rho x:A.w) rho a ~>h w { a / x}


G |- a  ~>h a'
-----------------------------   :: CAppLeft
G |- a [g]  ~>h a' [g]


------------------------------------  :: CAppCAbs
G |- (/\c:phi.b) [g] ~>h b { g / c}

G |- A : TYPE
G, x :- A |- b ~>h b'
------------------------------------------- :: AbsTerm
G |- (\- x:A. b) ~>h (\- x:A. b')


F ~ a : A in an_toplevel
------------------------- :: Axiom
G |- F ~>h a

------------------------- :: FstRed
G |- fst (rho a , b ) ~>h a

------------------------- :: SndRed
G |- snd (rho a , b ) ~>h b


G |- a ~>h a'
---------------------------- :: ConvTerm
 G |- a |> g ~>h a' |> g


Value v
------------------------------------- :: Combine
G |- (v |> g1) |> g2 ~>h v |> (g1 ; g2)

% Not used (or needed)

%   G ; dom G |- g : all rho x1:A1 -> B1 ~ all rho x2:A2 -> B2
%   a1 = a { x2 |> sym (piFst g) / x1 }
%   g2 = g @ refl2 (# x2 |> sym (piFst g) #) x2 (# piFst g #)
% ------------------------------------------------------------------------- :: Push
%   G |- ( (\rho x1:A1.a) |> g ) rho b ~>h (\rho x2:A2. (a1 |> g2)) rho b

%   G ; dom G |- g : all c1:phi1. A1 ~ all c2:phi2. A2
%   a1 = a { c2 |> sym (cpiFst g)  / c1 }
%   g2 = g @ (c2 |> sym (cpiFst g), c2)
% ------------------------------------------------------------------ :: CPush
%   G |- ( (/\c1:phi1.a) |> g ) [g1] ~>h (/\c2:phi2. (a1 |> g2)) [g1]



Value v
G ; dom G |- g : all rho x1: A1 -> B1 ~ all rho x2: A2 -> B2
b' = b |> sym (piFst g)
g' = g @ refl2 b' b (piFst g)
---------------------------------------------------------- :: Push
G |- (v |> g) rho b ~>h (v rho b') |> g'


Value v
G ; dom G |- g : all c1:phi1. A1 ~ all c2:phi2. A2
g1' = g1 |> sym (cpiFst g)
g' = g @ ( g1' , g1 )
-------------------------------------------------------- :: CPush
G |- (v |> g) [g1] ~>h (v [g1']) |> g'

Value v
G ; dom G |- g : Sigma rho1 x1: A1 . B1 ~ Sigma rho2 x2: A2 . B2
---------------------------------------------------------- :: FstPush
G |- fst (v |> g) ~>h (fst v) |> sigmaFst g

Value v
G ; dom G |- g : Sigma rho1 x1: A1 . B1 ~ Sigma rho2 x2: A2 . B2
b' = b |> sym (sigmaFst g)
g' = g @ refl2 b' b (sigmaFst g)
---------------------------------------------------------- :: SndPush
G |- snd (v |> g) ~>h (snd v) |> g'
